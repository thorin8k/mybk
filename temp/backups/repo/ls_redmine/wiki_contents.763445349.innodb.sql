/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wiki_contents` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `page_id` int(11) NOT NULL,
  `author_id` int(11) DEFAULT NULL,
  `text` longtext,
  `comments` varchar(255) DEFAULT '',
  `updated_on` datetime NOT NULL,
  `version` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `wiki_contents_page_id` (`page_id`),
  KEY `index_wiki_contents_on_author_id` (`author_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
INSERT INTO `wiki_contents` VALUES (1,1,3,'h1. Wiki\r\n\r\n\r\nWiki taonet','','2011-02-11 13:04:55',1),(3,3,11,'h1. Wiki\r\n\r\nObtener Rownumber en MySQL y SQLServer:\r\n\r\nSQLSERVER\r\n\r\nSELECT ROW_NUMBER () OVER (ORDER BY EmployeeID) AS RowNumber, EmployeeName\r\nFROM Employee ORDER BY EmployeeID\r\n\r\nMYSQL\r\n\r\nSELECT @rownum:=@rownum+1 AS rownum, tao_patient.*\r\nFROM (SELECT @rownum:=0) R, tao_patient;','','2011-02-21 08:14:19',1),(4,4,7,'h1. EVITAR COLISION DE IDENTIFICADORES CON EXTJS FORMS\r\n\r\nDescripción del problema: Durante la navegación sobre una JSP basada en elementos extjs, a veces se producen errores gráficos tales como la duplicación, desaparición o cambio de situación de los input objects. Esto se debe al tratamiento interno que hace ExtJs con los identificadores de los elementos.\r\n\r\nSolución al problema: Se ha detectado que, en principio, ésto sólo afecta a los elementos Exts Form, por lo que como solución se establece que no se deben compartir los names e ids de los items asociados a un objeto ExtJs Form, siempre y cuando exista la posibilidad de que un alguno de éstos identificadores colisione con otro declarado en algún otro objeto ExtJs Form situado en su misma librería javascript o cargado desde otra pero en su misma JSP.\r\n\r\nSe establece como norma que, para evitar error y mantener una homogeneidad, declarar con esta similitud:\r\n\r\nFormDetalle= new Ext.FormPanel({\r\n......\r\nitems: [{name: \'did\',id: \'did_id\',...},{name: \'dname\',id: \'dname_id\',...}]\r\n.....\r\n}\r\nFormFiltrado= new Ext.FormPanel({\r\n......\r\nitems: [{name: \'fid\',id: \'fid_id\',...},{name: \'fname\',id: \'fname_id\',...}]\r\n.....\r\n}\r\n\r\n\r\nh1. VARIACIÓN DEL PATRÓN SERVICE EN PROXYLAB\r\n\r\nDescripción del problema: La necesidad de incluir operaciones o consultas específicas de cada entidad de la aplicación, hacen que la interfaz IProxyLabService contenta declaraciones no comunes a todas las entidades, provocando que  nuestros managers posean una cantidad de implementaciones nulas provenientes de dicha interfaz.\r\n\r\nSolución al problema: Los beans que usamos como inyección de depencia a nuestros managers de negocio, apuntaban a una instancia de IProxyLabService. Ahora, un manager es capaz de poseer su propia interfaz de negocio (siendo ésta una herencia de IProxyLabService) y usarla como inyección contra su mismo bean. De esta forma, los métodos personalizados se \"aislan\" de los comunes y no repercuten en nuestros otros managers.\r\n\r\nEj: IF-> public interface IResultService extends IProxyLabService<SampleResult, ResultsView>...\r\n    CL-> public class ResultsManagementService extends ServiceBase implements ResultService .....\r\n','','2011-06-22 08:51:45',4);
